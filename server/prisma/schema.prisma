// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  user_id          Int                @id @default(autoincrement())
  username         String             @unique(map: "User_username_key")
  email            String             @unique(map: "User_email_key")
  password         String?
  firstName        String?
  lastName         String?
  picture          String?
  role             String             @default("user")
  enable           Boolean            @default(true)
  address          String?
  gender           String?
  birthDate        DateTime?
  occupation       String?
  phone            String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  message          message[]
  recommendhistory recommendhistory[]
}

model message {
  message_id Int      @id @default(autoincrement())
  name       String
  email      String
  tel        String?
  content    String
  createdAt  DateTime @default(now())
  user_id    Int?
  user       user?    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_message_user")

  @@index([user_id], map: "Message_userId_fkey")
}

model motorcycle {
  motorcycle_id    Int      @id @default(autoincrement())
  moto_name        String   @db.VarChar(45)
  moto_brand       String   @db.VarChar(30)
  moto_weight      Float    @db.Float
  moto_cc          Int
  maintenance_cost Int
  consumption_rate Float    @db.Float
  moto_content     String   @db.Text
  moto_price       Int
  moto_view        Int?
  moto_type_id     Int
  picture          String?
  fuel_size        Float?
  mototype         mototype @relation(fields: [moto_type_id], references: [moto_type_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_motorcycle_mototype")

  @@index([moto_type_id], map: "Motorcycle_moto_type_id_fkey")
}

model mototype {
  moto_type_id   Int          @id @default(autoincrement())
  moto_type_name String       @db.VarChar(45)
  picture        String?
  motorcycle     motorcycle[]
}

model recommendhistory {
  history_id   Int      @id @default(autoincrement())
  user_id      Int?
  selectedType Int?
  priority     String
  criteria     String
  result       String   @db.LongText
  createdAt    DateTime @default(now())
  user         user?    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_recommend_user")

  @@index([user_id], map: "RecommendHistory_userId_fkey")
}


